# Turing machine that decides 
# a^n b^n^2 such that n > 0

start: start
accept: good
reject: bad

transitions:
- [start, _, bad, _, R]
- [start, b, bad, b, R]
- [start, a, shiftA, $, R]

- [shiftA, a, shiftA, a, R]
- [shiftA, b, shiftB, a, R]
- [shiftA, _, returnToStart, a, L]

- [shiftB, a, shiftA, b, R]
- [shiftB, b, shiftB, b, R]
- [shiftB, _, returnToStart, b, L]

- [returnToStart, $, createATracks, $, R]
- [returnToStart, a, returnToStart, a, L]
- [returnToStart, b, returnToStart, b, L]

- [createATracks, a, createATracks, a_a___, R]
- [createATracks, b, returnBTrack, bx, L]
- [createATracks, _, bad, _, R]

- [returnBTrack, bx, returnBTrack, bx, L]
- [returnBTrack, a_a___, returnBTrack, a_a___, L]
- [returnBTrack, a_a_b_, returnBTrack, a_a_b_, L]
- [returnBTrack, ____b_, returnBTrack, ____b_, L]
- [returnBTrack, $, insertOneB, $, R]

- [insertOneB, a_a___, createBTrack, a_a_b_, R]
- [insertOneB, a_a_b_, insertOneB, a_a_b_, R]
- [insertOneB, ____b_, insertOneB, ____b_, R]
- [insertOneB, bx, createBTrack, ____b_, R]
- [insertOneB, b, bad, b, R]
- [insertOneB, a, bad, a, R]

- [createBTrack, b, returnBTrack, bx, L]
- [createBTrack, a, bad, a, R]
- [createBTrack, a_a___, createBTrack, a_a___, R]
- [createBTrack, a_a_b_, createBTrack, a_a_b_, R]
- [createBTrack, ____b_, createBTrack, ____b_, R]
- [createBTrack, bx, createBTrack, bx, R]
- [createBTrack, _, return, _, L]

- [return, a_a___, return, a_a___, L]
- [return, a_a_b_, return, a_a_b_, L]
- [return, ____b_, return, ____b_, L]
- [return, bx, return, _, L]
- [return, $, startCount, $, R]

- [startCount, a_a___, bad, a_a___, R]
- [startCount, a_a_b_, countOnce, axa_bx, R]
- [startCount, ____b_, bad, ____b_, R]

- [countOnce, _, returnToEnsure, _, L]
- [countOnce, a_a_b_, returnOnce, a_a_bx, L]
- [countOnce, axa_b_, returnOnce, axa_bx, L]
- [countOnce, a_axb_, returnOnce, a_axbx, L]
- [countOnce, axaxb_, returnOnce, axaxb_, L]
- [countOnce, ____b_, returnOnce, ____bx, L]
- [countOnce, a_a_bx, countOnce, a_a_bx, R]
- [countOnce, axaxbx, countOnce, axaxbx, R]
- [countOnce, axa_bx, countOnce, axa_bx, R]
- [countOnce, a_axbx, countOnce, a_axbx, R]
- [countOnce, ____bx, countOnce, ____bx, R]

- [returnOnce, a_a_b_, returnOnce, a_a_b_, L]
- [returnOnce, axa_b_, returnOnce, axa_b_, L]
- [returnOnce, a_axb_, returnOnce, a_axb_, L]
- [returnOnce, axaxb_, returnOnce, axaxb_, L]
- [returnOnce, ____b_, returnOnce, ____b_, L]
- [returnOnce, a_a_bx, returnOnce, a_a_bx, L]
- [returnOnce, axa_bx, returnOnce, axa_bx, L]
- [returnOnce, a_axbx, returnOnce, a_axbx, L]
- [returnOnce, axaxbx, returnOnce, axaxbx, L]
- [returnOnce, ____bx, returnOnce, ____bx, L]
- [returnOnce, $, incrementA, $, R]

- [incrementA, a_a_b_, returnToCount, a_axb_, L]
- [incrementA, a_a_bx, returnToCount, a_axbx, L]
- [incrementA, axa_b_, returnToCount, axaxb_, L]
- [incrementA, axa_bx, returnToCount, axaxbx, L]
- [incrementA, a_axb_, incrementA, a_axb_, R]
- [incrementA, axaxb_, incrementA, axaxb_, R]
- [incrementA, a_axbx, incrementA, a_axbx, R]
- [incrementA, axaxbx, incrementA, axaxbx, R]
- [incrementA, ____b_, returnTwice, ____b_, L]
- [incrementA, ____bx, returnTwice, ____bx, L]

- [returnTwice, a_a_b_, returnTwice, a_a_b_, L]
- [returnTwice, axa_b_, returnTwice, axa_b_, L]
- [returnTwice, a_axb_, returnTwice, a_a_b_, L]
- [returnTwice, axaxb_, returnTwice, axa_b_, L]
- [returnTwice, ____b_, returnTwice, ____b_, L]
- [returnTwice, a_a_bx, returnTwice, a_a_bx, L]
- [returnTwice, axa_bx, returnTwice, axa_bx, L]
- [returnTwice, a_axbx, returnTwice, a_a_bx, L]
- [returnTwice, axaxbx, returnTwice, axa_bx, L]
- [returnTwice, ____bx, returnTwice, ____bx, L]
- [returnTwice, $, incrementR1, $, R]

- [returnToCount, a_a_b_, returnToCount, a_a_b_, L]
- [returnToCount, axa_b_, returnToCount, axa_b_, L]
- [returnToCount, a_axb_, returnToCount, a_axb_, L]
- [returnToCount, axaxb_, returnToCount, axaxb_, L]
- [returnToCount, ____b_, returnToCount, ____b_, L]
- [returnToCount, a_a_bx, returnToCount, a_a_bx, L]
- [returnToCount, axa_bx, returnToCount, axa_bx, L]
- [returnToCount, a_axbx, returnToCount, a_axbx, L]
- [returnToCount, axaxbx, returnToCount, axaxbx, L]
- [returnToCount, ____bx, returnToCount, ____bx, L]
- [returnToCount, $, countOnce, $, R]

- [incrementR1, a_a_b_, peekRight, axa_b_, R]
- [incrementR1, a_a_bx, peekRight, axa_bx, R]
- [incrementR1, axa_b_, incrementR1, axa_b_, R]
- [incrementR1, axa_bx, incrementR1, axa_bx, R]
- [incrementR1, ____b_, bad, ____b_, R]
- [incrementR1, ____bx, returnToEnsure, ____bx, L]

- [peekRight, a_a_b_, returnToCount, a_a_b_, L]
- [peekRight, axa_b_, returnToCount, axa_b_, L]
- [peekRight, a_a_bx, returnToCount, a_a_bx, L]
- [peekRight, axa_bx, returnToCount, axa_bx, L]
- [peekRight, ____bx, returnToEnsure, ____bx, L]
- [peekRight, ____b_, bad, ____b_, L]

- [returnToEnsure, a_a_b_, bad, a_a_b_, L]
- [returnToEnsure, axa_b_, bad, axa_b_, L]
- [returnToEnsure, a_axb_, bad, a_axb_, L]
- [returnToEnsure, axaxb_, bad, axaxb_, L]
- [returnToEnsure, ____b_, bad, ____b_, L]
- [returnToEnsure, a_a_bx, bad, a_a_bx, L]
- [returnToEnsure, axa_bx, returnToEnsure, axa_bx, L]
- [returnToEnsure, a_axbx, bad, a_axbx, L]
- [returnToEnsure, axaxbx, bad, axaxbx, L]
- [returnToEnsure, ____bx, returnToEnsure, ____bx, L]
- [returnToEnsure, $, ensureB, $, R]

- [ensureB, _, good, _, R]
- [ensureB, ____bx, ensureB, ____bx, R]
- [ensureB, axaxbx, bad, axaxbx, R]
- [ensureB, ____b_, bad, ____b_, R]
- [ensureB, a_a_b_, bad, a_a_b_, R]
- [ensureB, axa_b_, bad, axa_b_, R]
- [ensureB, a_axb_, bad, a_axb_, R]
- [ensureB, axaxb_, bad, axaxb_, R]
- [ensureB, a_a_bx, bad, a_a_bx, R]
- [ensureB, axa_bx, ensureB, axa_bx, R]
- [ensureB, a_axbx, bad, a_axbx, R]
